{"version":3,"sources":["components/UI/Forms/Input/Input.js","utility/validity.js","components/Shop/Checkout/CheckoutSummary.js","components/Shop/Checkout/ContactData/ContactData.js","components/Shop/Checkout/Checkout.js"],"names":["input","props","inputElement","inputClasses","invalid","shouldValidate","tuched","push","elementType","className","elementConfig","value","onChange","change","options","map","option","key","deliveryValue","checkValidity","rules","isValid","required","trim","minLength","length","maxLength","CheckoutSummary","Products","order","filterProductsList","products","productImages","productPrices","productSizes","Button","class","clicked","onCheckoutCancle","text","onCheckoutContinue","CheckoutData","state","orderForm","name","type","placeholder","validation","valid","street","zipCode","country","email","deliveryMethod","formIsValid","orderHandler","e","preventDefault","formData","formElementIdentifier","price","totalPrice","orderData","userId","purchaseProducts","token","inputChangedHandler","event","inputIdentefier","updatedOrderForm","updatedFormElement","target","inputIndentifiers","setState","$","document","ready","window","formSelect","formElementArray","this","id","config","form","onSubmit","formElement","Input","disabled","loading","Spinner","s","Component","connect","shopReducer","authReducer","dispatch","actionCreators","withErrorHandler","axios","Checkout","orderable","errorMessage","history","goBack","replace","summary","to","purchasedRedirect","purchased","path","match","component","ContactData","PRODUCTS_IMAGES","PRODUCTS_PRICES","PRODUCTS_SIZES","orderReducer"],"mappings":"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","file":"static/js/4.11e5b0e8.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Input.scss'\r\nconst input = (props) =>{\r\n    let inputElement = null;\r\n    const inputClasses = []\r\n    if (props.invalid && props.shouldValidate && props.tuched) {\r\n        inputClasses.push('Invalid')\r\n    }\r\n\r\n    switch ( props.elementType ) {\r\n        case ('input'):\r\n            inputElement = <input className={inputClasses} {...props.elementConfig} value={props.value} onChange={props.change}/>\r\n            break;\r\n        case ('textarea'):\r\n            inputElement = <textarea className={inputClasses} {...props.elementConfig} value={props.value} onChange={props.change}/>\r\n            break;\r\n        case ('select'):   \r\n            inputElement = \r\n            <select value={props.value} onChange={props.change}>\r\n                {props.elementConfig.options.map(option => (\r\n                    <option key={option.value} value={option.value} >{option.deliveryValue}</option>\r\n                ))}\r\n            </select>\r\n            break;\r\n        default:\r\n            inputElement = <input {...props.elementConfig} value={props.value} onChange={props.change}/>\r\n    }\r\n    return (\r\n        <div>\r\n            {inputElement}\r\n        </div>\r\n    )\r\n}\r\nexport default input;","export const checkValidity = (value,rules) => {\r\n    let isValid = true\r\n    if (rules.required){\r\n        isValid = value.trim() !== '' && isValid;\r\n    }\r\n    if (rules.minLength){\r\n        isValid = value.length >= rules.minLength && isValid;\r\n    }\r\n    if (rules.maxLength){\r\n        isValid = value.length <= rules.maxLength && isValid;\r\n    }\r\n    return isValid\r\n}","import React from 'react';\r\nimport Aux from '../../hoc/Auxilary/Auxilary';\r\nimport Products from '../Products/Products';\r\nimport ButtonUI from '../../UI/Button/Button';\r\n\r\nconst CheckoutSummary = (props) => {\r\n        return(\r\n            <Aux>\r\n                <h1>Your order</h1>\r\n                <Products \r\n                    order={props.order}\r\n                    filterProductsList={props.products}\r\n                    productImages={props.productImages}\r\n                    productPrices={props.productPrices}\r\n                    productSizes={props.productSizes}/>\r\n                    <ButtonUI class='red lighten-3' clicked={props.onCheckoutCancle} text='Cancle' />\r\n                    <ButtonUI class='green lighten-3' clicked={props.onCheckoutContinue} text = 'Continue' />\r\n            </Aux>\r\n        )\r\n}\r\nexport default CheckoutSummary;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport './ContactData.scss';\r\nimport $ from 'jquery';\r\n\r\n//components\r\nimport ButtonUI from '../../../UI/Button/Button';\r\nimport Spinner from '../../../UI/Spinner/Spinner';\r\nimport InputComponent from '../../../UI/Forms/Input/Input';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler'\r\n\r\n//react-materialize\r\nimport { Row, Col } from 'react-materialize';\r\n\r\n//redux\r\nimport { connect } from 'react-redux';\r\nimport * as actionCreators from '../../../../store/actions/allActions';\r\n\r\n//utility\r\nimport { checkValidity } from '../../../../utility/validity';\r\n\r\nclass CheckoutData extends Component{\r\n    state = {\r\n        orderForm: {\r\n            name: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder:'Your name',\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                tuched: false\r\n            },\r\n                \r\n            street: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder:'Your street',\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                tuched: false\r\n            },\r\n            zipCode: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder:'Your zipCode',\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 5,\r\n                    maxLength: 5,\r\n                },\r\n                valid: false,\r\n                tuched: false\r\n            },\r\n                country: {\r\n                    elementType: 'input',\r\n                    elementConfig: {\r\n                        type: 'text',\r\n                        placeholder:'Your country',\r\n                    },\r\n                    value: '',\r\n                    validation: {\r\n                        required: true\r\n                    },\r\n                    valid: false,\r\n                    tuched: false\r\n                },  \r\n                email: {\r\n                    elementType: 'input',\r\n                    elementConfig: {\r\n                        type: 'email',\r\n                        placeholder:'Your email',\r\n                    },\r\n                    value: '',\r\n                    validation: {\r\n                        required: true\r\n                    },\r\n                    valid: false,\r\n                    tuched: false\r\n                },  \r\n                deliveryMethod: {\r\n                    elementType: 'select',\r\n                    elementConfig: {\r\n                        options: [\r\n                            {value:'fastest', deliveryValue: 'Fastest'},\r\n                            {value:'cheapest', deliveryValue: 'Cheapest'}\r\n                        ]\r\n                    },\r\n                    validation: {},\r\n                    value: 'fastest',\r\n                    valid: true\r\n                },  \r\n        },\r\n        formIsValid: false,\r\n    }\r\n    orderHandler = (e) => {\r\n        e.preventDefault()\r\n        const formData = {};\r\n        for (let formElementIdentifier in this.state.orderForm){\r\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value\r\n        }\r\n        const products = {\r\n            products: this.props.products,\r\n            price: this.props.totalPrice,\r\n            orderData: formData,\r\n            userId: this.props.userId,\r\n        }\r\n        this.props.purchaseProducts(products, this.props.token)\r\n    }\r\n    inputChangedHandler = (event, inputIdentefier) => {\r\n        const updatedOrderForm = {...this.state.orderForm};\r\n        const updatedFormElement = {...updatedOrderForm[inputIdentefier]};\r\n        updatedFormElement.value = event.target.value;\r\n        updatedFormElement.valid = checkValidity (updatedFormElement.value,updatedFormElement.validation)\r\n        \r\n        updatedFormElement.tuched = true;\r\n        updatedOrderForm[inputIdentefier] = updatedFormElement;\r\n        let formIsValid = true;\r\n        for (let inputIndentifiers in updatedOrderForm){\r\n            formIsValid = updatedOrderForm[inputIndentifiers].valid && formIsValid;\r\n        }\r\n        this.setState({\r\n            orderForm: updatedOrderForm,\r\n            formIsValid: formIsValid\r\n        })\r\n    }\r\n    componentDidMount(){\r\n        $(document).ready(function() {\r\n            window.$('select').formSelect();\r\n          });\r\n    }\r\n    render() {\r\n        const formElementArray = [];\r\n        for (let key in this.state.orderForm){\r\n            formElementArray.push({\r\n                id:key,\r\n                config: this.state.orderForm[key]\r\n            })\r\n        }\r\n        let form = (\r\n            <form onSubmit={this.orderHandler} className='text-placeholder'>\r\n               \r\n               {formElementArray.map(formElement => (\r\n                    <InputComponent \r\n                        key={formElement.id}\r\n                        elementType={formElement.config.elementType} \r\n                        elementConfig={formElement.config.elementConfig} \r\n                        value={formElement.config.value}\r\n                        change={(event) => this.inputChangedHandler(event, formElement.id)}\r\n                        invalid={!formElement.config.valid}\r\n                        shouldValidate={formElement.config.validation}\r\n                        tuched={formElement.config.tuched} />\r\n               ))}\r\n                <ButtonUI  \r\n                        class='green lighten-2'\r\n                        text='Order'\r\n                        disabled={!this.state.formIsValid}\r\n                    />\r\n            </form>\r\n            );\r\n        if (this.props.loading) {\r\n               form = <Spinner/>\r\n        }\r\n        return(\r\n            <div>\r\n                <Row>\r\n                    <Col s={3}/>\r\n                    <Col s={6}>\r\n                    <h4 className='center '>Enter your contact data</h4>\r\n                    {form}\r\n                    </Col>\r\n                    <Col s={3}/>\r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        products: state.shopReducer.products,\r\n        totalPrice: state.shopReducer.totalPrice,\r\n        loading: state.shopReducer.loading,\r\n        token: state.authReducer.token,\r\n        userId: state.authReducer.userId\r\n    }\r\n}\r\nconst mapDispachToProps = dispatch =>{\r\n    return {\r\n        purchaseProducts: (orderData,token) => dispatch(actionCreators.purchaseProducts(orderData,token))\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispachToProps)(withErrorHandler(CheckoutData,axios));","import React, { Component } from 'react';\r\nimport Aux from '../../hoc/Auxilary/Auxilary';\r\nimport { Route, Redirect } from 'react-router-dom'\r\n\r\n//components\r\nimport CheckoutSummary from './CheckoutSummary';\r\nimport ContactData from '../Checkout/ContactData/ContactData'\r\n\r\n//const\r\nimport { PRODUCTS_IMAGES, PRODUCTS_SIZES, PRODUCTS_PRICES } from '../../../const/const';\r\n\r\n//redux\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nclass Checkout extends Component{\r\n    state = {\r\n        orderable: false,\r\n        errorMessage: \"\",\r\n        order:true\r\n    }\r\n    onCheckoutCancle = () => {\r\n        this.props.history.goBack();\r\n    }\r\n    onCheckoutContinue = () => {\r\n        this.props.history.replace('/checkout/contact-data')\r\n    }\r\n    render(){\r\n        let summary = <Redirect to='/'/>\r\n\r\n        if(this.props.products){\r\n            const purchasedRedirect =  this.props.purchased? <Redirect to='/'/>:null;\r\n            summary =  <div>\r\n                            {purchasedRedirect}\r\n                            <Route \r\n                                path={this.props.match.path + '/contact-data'} \r\n                                component={ContactData} />\r\n                            <CheckoutSummary\r\n                                order={this.state.order}\r\n                                products={this.props.products}\r\n                                productImages={PRODUCTS_IMAGES}\r\n                                productPrices={PRODUCTS_PRICES}\r\n                                productSizes={PRODUCTS_SIZES}\r\n                                onCheckoutCancle={this.onCheckoutCancle}\r\n                                onCheckoutContinue={this.onCheckoutContinue}\r\n                            />\r\n                        </div>\r\n        }\r\n        return(\r\n            <Aux>\r\n               {summary}\r\n            </Aux>\r\n        )\r\n    }   \r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        products: state.shopReducer.products,\r\n        purchased: state.orderReducer.purchased\r\n    }\r\n}\r\nexport default connect(mapStateToProps)(Checkout);"],"sourceRoot":""}