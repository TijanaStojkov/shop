{"version":3,"sources":["components/UI/Forms/Input/Input.js","utility/validity.js","components/Auth/Auth.js"],"names":["input","props","inputElement","inputClasses","invalid","shouldValidate","tuched","push","elementType","className","elementConfig","value","onChange","change","options","map","option","key","deliveryValue","checkValidity","rules","isValid","required","trim","minLength","length","maxLength","Auth","state","controls","email","type","placeholder","validation","valid","password","isSignup","inputChangedHandler","event","controlName","updatedControls","target","setState","submitHandler","preventDefault","auth","switchAuthModeHandler","prevState","this","shopping","authRedirectPath","setAuthRedirect","formElementArray","id","config","form","onSubmit","formElement","loading","errorMessage","errorMessageText","error","style","padding","successMessage","redirect","isAuth","to","marginTop","flat","node","waves","onClick","Component","connect","authReducer","token","shopReducer","building","dispatch","actions","path"],"mappings":"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","file":"static/js/3.f9270a1a.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Input.scss'\r\nconst input = (props) =>{\r\n    let inputElement = null;\r\n    const inputClasses = []\r\n    if (props.invalid && props.shouldValidate && props.tuched) {\r\n        inputClasses.push('Invalid')\r\n    }\r\n\r\n    switch ( props.elementType ) {\r\n        case ('input'):\r\n            inputElement = <input className={inputClasses} {...props.elementConfig} value={props.value} onChange={props.change}/>\r\n            break;\r\n        case ('textarea'):\r\n            inputElement = <textarea className={inputClasses} {...props.elementConfig} value={props.value} onChange={props.change}/>\r\n            break;\r\n        case ('select'):   \r\n            inputElement = \r\n            <select value={props.value} onChange={props.change}>\r\n                {props.elementConfig.options.map(option => (\r\n                    <option key={option.value} value={option.value} >{option.deliveryValue}</option>\r\n                ))}\r\n            </select>\r\n            break;\r\n        default:\r\n            inputElement = <input {...props.elementConfig} value={props.value} onChange={props.change}/>\r\n    }\r\n    return (\r\n        <div>\r\n            {inputElement}\r\n        </div>\r\n    )\r\n}\r\nexport default input;","export const checkValidity = (value,rules) => {\r\n    let isValid = true\r\n    if (rules.required){\r\n        isValid = value.trim() !== '' && isValid;\r\n    }\r\n    if (rules.minLength){\r\n        isValid = value.length >= rules.minLength && isValid;\r\n    }\r\n    if (rules.maxLength){\r\n        isValid = value.length <= rules.maxLength && isValid;\r\n    }\r\n    return isValid\r\n}","import React, { Component } from 'react';\r\nimport './Auth.scss';\r\n\r\n//materialize\r\nimport { Button } from 'react-materialize';\r\n\r\n//redux\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../store/actions/allActions';\r\n\r\n//components\r\nimport { Redirect } from 'react-router-dom';\r\nimport InputComponent from '../UI/Forms/Input/Input';\r\nimport Spinner from '../UI/Spinner/Spinner';\r\n\r\n//utility\r\nimport { checkValidity } from '../../utility/validity';\r\n\r\nclass Auth extends Component {\r\n    state = {\r\n        controls: {\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Email'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                tuched: false\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Password'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                },\r\n                valid: false,\r\n                tuched: false\r\n            }\r\n        },\r\n        isSignup: false\r\n    }\r\n    componentDidMount () {\r\n        if(!this.props.shopping && this.props.authRedirectPath !== '/'){\r\n            this.props.setAuthRedirect('/')\r\n        }\r\n    }\r\n    inputChangedHandler = (event, controlName) => {\r\n        const updatedControls = {\r\n            ...this.state.controls,\r\n            [controlName]: {\r\n                ...this.state.controls[controlName],\r\n                value: event.target.value,\r\n                valid: checkValidity(event.target.value,this.state.controls[controlName].validation),\r\n                tuched: true,\r\n            }\r\n        }\r\n        this.setState({\r\n            controls: updatedControls\r\n        })\r\n    }\r\n    submitHandler = (event) => {\r\n        event.preventDefault();\r\n        this.props.auth(this.state.controls.email.value,this.state.controls.password.value, this.state.isSignup)\r\n    }\r\n    switchAuthModeHandler = (event) => {\r\n        event.preventDefault();\r\n        this.setState( prevState => {\r\n            return {isSignup: !prevState.isSignup}\r\n        })\r\n    }\r\n    render () {\r\n        const formElementArray = [];\r\n        for(let key in this.state.controls){\r\n            formElementArray.push({\r\n                id: key,\r\n                config: this.state.controls[key]\r\n            })\r\n        }\r\n        let form = \r\n        <form onSubmit={this.submitHandler}  className='text-placeholder '>\r\n            {formElementArray.map( formElement => \r\n                <InputComponent \r\n                            key={formElement.id}\r\n                            elementType={formElement.config.elementType} \r\n                            elementConfig={formElement.config.elementConfig} \r\n                            value={formElement.config.value}\r\n                            change={(event) => this.inputChangedHandler(event, formElement.id)}\r\n                            invalid={!formElement.config.valid}\r\n                            shouldValidate={formElement.config.validation}\r\n                            tuched={formElement.config.tuched} />\r\n                )}\r\n                <Button>Submit</Button>\r\n            </form>\r\n        if(this.props.loading){\r\n            form = <Spinner/>\r\n        };\r\n        let errorMessage = null;\r\n        const errorMessageText = \r\n            this.props.error==='EMAIL_EXISTS'?'Email already exists': \r\n            this.props.error==='WEAK_PASSWORD : Password should be at least 6 characters'?'Password must be at least 6 characters long': \r\n            this.props.error==='EMAIL_NOT_FOUND'?'The email address or password is incorrect':\r\n            this.props.error==='INVALID_PASSWORD'?'Invalid password':null\r\n\r\n        if(this.props.error){\r\n            errorMessage = <p className='red lighten-3' style={{padding: \"5px\"}}>{errorMessageText}</p>\r\n        }\r\n        let successMessage = null\r\n        if(this.props.successMessage){\r\n            successMessage = <p className='green lighten-3' style={{padding: \"5px\"}}>{this.props.successMessage}</p>\r\n        }\r\n        let redirect = null;\r\n        if(this.props.isAuth){\r\n            redirect = <Redirect to={this.props.authRedirectPath}/>\r\n        }\r\n        return (\r\n            <div style={{padding: '20px'}} >\r\n                {redirect}\r\n                {errorMessage}\r\n                {successMessage}\r\n                <h3>{this.state.isSignup?'Sign up': 'Sign in'}</h3>\r\n                {form}\r\n                <Button style={{marginTop: '10px'}} flat node=\"button\" waves=\"light\" onClick={this.switchAuthModeHandler}>{this.state.isSignup?'Switch to sign in':'Switch to sign up'}</Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    return{\r\n        loading: state.authReducer.loading,\r\n        error: state.authReducer.error,\r\n        isAuth: state.authReducer.token!==null,\r\n        shopping: state.shopReducer.building,\r\n        authRedirectPath: state.authReducer.authRedirectPath,\r\n        successMessage: state.authReducer.successMessage,\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        auth: (email, password, isSignup) => dispatch(actions.auth(email,password, isSignup)),\r\n        setAuthRedirect: (path) => dispatch(actions.setAuthRedirect(path))\r\n    }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);"],"sourceRoot":""}